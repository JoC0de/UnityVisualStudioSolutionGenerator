#nullable enable

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using UnityEditor;

namespace UnityVisualStudioSolutionGenerator
{
    /// <summary>
    ///     A post processor that triggers the generation of the updated Visual Studio Solution and Project files.
    ///     It is called by Unity after Unity generated a .csproj file or a .sln file.
    /// </summary>
    internal class VisualStudioAssetPostprocessor : AssetPostprocessor
    {
        /// <summary>
        ///     Called once all .csproj files and the .sln is generated.
        /// </summary>
        /// <remarks>
        ///     Code that calls this: see
        ///     <see href="https://github.com/needle-mirror/com.unity.ide.visualstudio/blob/master/Editor/ProjectGeneration/ProjectGeneration.cs" />.
        /// </remarks>
        [SuppressMessage("CodeQuality", "IDE0051:Remove unused private members", Justification = "Called by the 'Unity'")]
        private static void OnGeneratedCSProjectFiles()
        {
            if (!GeneratorSettings.IsEnabled)
            {
                return;
            }

            var stopwatch = Stopwatch.StartNew();
            var solutionFile = SolutionFile.CurrentProjectSolution;
            var allProjects = SolutionFileParser.Parse(solutionFile, false);

            var newProjects = new List<ProjectFile>();
            foreach (var project in allProjects)
            {
                ProjectFileGeneratorBase generator = GeneratorSettings.GenerateSdkStyleProjects
                    ? new ProjectFileGeneratorSdkStyle(project.FilePath)
                    : new ProjectFileGeneratorLegacyStyle(project.FilePath);

                if (generator.IsProjectFromPackageCache())
                {
                    LogHelper.LogVerbose(
                        $"The project '{Path.GetFileNameWithoutExtension(project.FilePath)}' is a Unity Package so we don't change the '.csproj' file.");
                    newProjects.Add(project);
                    continue;
                }

                var newProjectFilePath = generator.WriteProjectFile(solutionFile.SolutionDirectoryPath);

                newProjects.Add(new ProjectFile(newProjectFilePath, project.Id));
            }

            SolutionFileWriter.WriteToFileSafe(solutionFile.SolutionFilePath, solutionFile.SolutionDirectoryPath, newProjects);
            LogHelper.LogInformation($"Generated Visual Studio Solution: '{solutionFile}' in {stopwatch.ElapsedMilliseconds} ms.");
        }

        /// <summary>
        ///     Called after Unity generated a .sln file.
        /// </summary>
        /// <param name="path">The target path of the generated .sln file.</param>
        /// <param name="content">The content of the .sln file generated by Unity.</param>
        /// <returns>The probably changed content of the .sln file.</returns>
        private static string OnGeneratedSlnSolution(string path, string content)
        {
            return GeneratorSettings.IsEnabled ? content : RemoveGeneratedProjectsFromSolution(path, content);
        }

        private static string RemoveGeneratedProjectsFromSolution(string path, string content)
        {
            // if one of the .csproj files are inside a folder they are generated from this plugin so we need to remove them
            if (content.IndexOfAny(new[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar }) == -1)
            {
                return content;
            }

            var solutionDirectoryPath = Path.GetFullPath(
                Path.GetDirectoryName(path) ?? throw new InvalidOperationException($"Failed to get directory path of '{path}'"));
            var allProjects = SolutionFileParser.Parse(content, solutionDirectoryPath, !GeneratorSettings.IsEnabled);
            return SolutionFileWriter.WriteToText(solutionDirectoryPath, allProjects);
        }
    }
}
