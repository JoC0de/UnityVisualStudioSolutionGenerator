#nullable enable

using System;
using System.Collections.Generic;
using System.IO;

namespace UnityVisualStudioSolutionGenerator
{
    public static class SolutionFileParser
    {
        private const string ProjectStartTagName = "Project";

        private const string ProjectEndTagName = "EndProject";

        public static IReadOnlyList<ProjectFile> Parse(string content, string solutionDirectoryPath)
        {
            _ = content ?? throw new ArgumentNullException(nameof(content));
            var allProjects = new List<ProjectFile>();
            var projects = GetUsedProjectFiles(content, solutionDirectoryPath);

            foreach (var projectFile in projects)
            {
                // unity didn't remove the project-entry generated from us from the solution so we need to handle cases where we have duplicate entries
                // one that lies in the solution directory (the one generated by Unity / not changed by us)
                if (allProjects.Contains(projectFile))
                {
                    if (Path.GetDirectoryName(projectFile.FilePath.AsSpan()).Equals(solutionDirectoryPath, StringComparison.Ordinal))
                    {
                        allProjects.Remove(projectFile);
                        allProjects.Add(projectFile);
                    }
                }
                else if (GeneratorSettings.IsEnabled ||
                         Path.GetDirectoryName(projectFile.FilePath.AsSpan()).Equals(solutionDirectoryPath, StringComparison.Ordinal))
                {
                    allProjects.Add(projectFile);
                }
            }

            return allProjects;
        }

        private static IEnumerable<ProjectFile> GetUsedProjectFiles(string content, string solutionDirectoryPath)
        {
            var projectIndex = 0;
            while (projectIndex < content.Length)
            {
                projectIndex = content.IndexOf(ProjectStartTagName, projectIndex, StringComparison.Ordinal);
                if (projectIndex < 0)
                {
                    break;
                }

                projectIndex += ProjectStartTagName.Length;
                projectIndex = SkipWhiteSpaces(content, projectIndex);

                if (content[projectIndex] != '(')
                {
                    // not a project start tag just the word Project
                    continue;
                }

                var endIndex = content.IndexOf(ProjectEndTagName, projectIndex, StringComparison.Ordinal);
                if (endIndex < 0)
                {
                    LogHelper.LogError($"Found 'Project' start but no 'EndProject' starting at char-index: {projectIndex}");
                    continue;
                }

                var firstCommaIndex = content.IndexOf(',', projectIndex, endIndex - projectIndex);
                if (firstCommaIndex < 0)
                {
                    LogHelper.LogError($"Found no ',' inside Project -> EndProject section: {content[projectIndex..endIndex]}");
                    continue;
                }

                ++firstCommaIndex; // skip the comma
                var secondCommaIndex = content.IndexOf(',', firstCommaIndex, endIndex - firstCommaIndex);
                if (secondCommaIndex < 0)
                {
                    LogHelper.LogError($"Found no second ',' inside Project -> EndProject section: {content[projectIndex..endIndex]}");
                    continue;
                }

                var projectFileNamePart = content[firstCommaIndex..secondCommaIndex].Trim('"', ' ');
                if (string.IsNullOrEmpty(projectFileNamePart))
                {
                    LogHelper.LogError($"Failed to extract csproj file name from Project -> EndProject section: {content[projectIndex..endIndex]}");
                    continue;
                }

                ++secondCommaIndex; // skip the comma
                var projectIdEndIndex = content.LastIndexOf('"', endIndex, endIndex - secondCommaIndex);
                if (projectIdEndIndex < 0)
                {
                    LogHelper.LogError(
                        $"Found no ProjectId ('\"') after the second ',' inside Project -> EndProject section: {content[projectIndex..endIndex]}");
                    continue;
                }

                var projectId = content[secondCommaIndex..projectIdEndIndex].Trim('"', ' ');
                projectIndex = endIndex + ProjectEndTagName.Length;

                var projectFilePath = Path.GetFullPath(projectFileNamePart, solutionDirectoryPath);
                yield return new ProjectFile(projectFilePath, projectId);
            }
        }

        private static int SkipWhiteSpaces(string content, int projectIndex)
        {
            while (projectIndex < content.Length && char.IsWhiteSpace(content[projectIndex]))
            {
                ++projectIndex;
            }

            return projectIndex;
        }
    }
}
